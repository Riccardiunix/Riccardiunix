shrink ()
{
	if [ "$grayscale" = "YES" ]; then
		gray_params="-sProcessColorModel=DeviceGray \
		             -sColorConversionStrategy=Gray \
		             -dOverrideICC"
	else
		gray_params=""
	fi

	gs					\
	  -q -dNOPAUSE -dBATCH -dSAFER		\
	  -sDEVICE=pdfwrite			\
	  -dCompatibilityLevel="$4"		\
	  -dPDFSETTINGS=/screen			\
	  -dEmbedAllFonts=true			\
	  -dSubsetFonts=true			\
	  -dAutoRotatePages=/None		\
	  -dColorImageDownsampleType=/Bicubic	\
	  -dColorImageResolution="$3"		\
	  -dGrayImageDownsampleType=/Bicubic	\
	  -dGrayImageResolution="$3"		\
	  -dMonoImageDownsampleType=/Subsample	\
	  -dMonoImageResolution="$3"		\
	  -sOutputFile="$2"			\
	  ${gray_params}			\
	  "$1"
}

get_pdf_version ()
{
	pdf_version=$(cut -b -1024 "$1" | LC_ALL=C awk 'BEGIN { found=0 }{ if (match($0, "%PDF-[0-9]\\.[0-9]") && ! found) { print substr($0, RSTART + 5, 3); found=1 } }')
	if [ -z "$pdf_version" ] || [ "${#pdf_version}" != "3" ]; then
		return 1
	fi
}

check_input_file ()
{
	if [ ! -f "$1" ]; then
		echo "Error: Input file does not exist." >&2
		return 1
	fi
}

check_smaller ()
{
	if [ ! -f "$1" ] || [ ! -f "$2" ]; then
		return 0;
	fi
	ISIZE="$(wc -c "$1" | awk '{ print $1 }')"
	OSIZE="$(wc -c "$2" | awk '{ print $1 }')"
	if [ "$ISIZE" -lt "$OSIZE" ]; then
		echo "Input smaller than output, doing straight copy" >&2
		cp "$1" "$2"
	fi
}

check_overwrite ()
{
	if [ "$1" = "$2" ]; then
		echo "The output file is the same as the input file. This would truncate the file." >&2
		echo "Use a temporary file as an intermediate step." >&2
		return 1
	fi
}

usage ()
{
	echo "Reduces PDF filesize by lossy recompressing with Ghostscript."
	echo "Not guaranteed to succeed, but usually works."
	echo
	echo "Usage: $1 [-g] [-h] [-o output] [-r res] infile"
	echo
	echo "Options:"
	echo " -g  Enable grayscale conversion which can further reduce output size."
	echo " -h  Show this help text."
	echo " -o  Output file, default is standard output."
	echo " -r  Resolution in DPI, default is 72."
}

grayscale=""
ofile="-"
res="72"

while getopts ':hgo:r:' flag; do
  case $flag in
    h)
      usage "$0"
      exit 0
      ;;
    g)
      grayscale="YES"
      ;;
    o)
      ofile="${OPTARG}"
      ;;
    r)
      res="${OPTARG}"
      ;;
    \?)
      echo "invalid option (use -h for help)"
      exit 1
      ;;
  esac
done
shift $((OPTIND - 1))

if [ -z "$1" ]; then
	usage "$0"
	exit 1
else
	ifile="$1"
fi

check_input_file "$ifile" || exit $?

check_overwrite "$ifile" "$ofile" || exit $?

get_pdf_version "$ifile" || pdf_version="1.5"

shrink "$ifile" "$ofile" "$res" "$pdf_version" || exit $?

check_smaller "$ifile" "$ofile"
